package basics { 
  class Blueprint {
    +sender(name, intializer, serializer)
    +receiver(name, intializer, serializer)
    -node(name, intializer, serializer)
    +instance(name, builder)
  }
  
  class NodeProvider {
    +name: String
    +initializer: Function
    +fromJson(json: Object)
    +toJson(node: Node): Object
  }
  
  NodeProvider --o Blueprint
  NodeProvider --> Node : creates
 
  interface EventEmitter {
    +on(eventName, callback)
    +trigger(eventName, arguments)
  }

  abstract class Node {
  
  }
  EventEmitter <|-- Node
  
  package connectables {
    abstract class ConnectableNode {
      +getIncomingConnections(): Connection[]
      +getOutgoingConnections(): Connection[]
      +connectAsSender(connection: Connection)
      +connectAsReceiver(connection: Connection)
    }
    Node <|-- ConnectableNode

    abstract class Sender {
      
    }
    ConnectableNode <|-- Sender
    note bottom of Sender
      connectAsReceiver(connection):
        throw new Error();
    end note

    abstract class Receiver {
      
    }
    ConnectableNode <|-- Receiver
    note bottom of Receiver
      connectAsSender(connection):
        throw new Error();
    end note

    class Neuron {
      +type: NeuronType
      +threshold: float
      +factor: float
      +maximum: float
      +associateConstant: float
      +disassociateConstant: float
    }
    ConnectableNode <|-- Neuron

    class Connection {
      +source: ConnectableNode
      +destination: ConnectableNode
      +initialWeight: float
      +decayConstant: float
    }
    EventEmitter <|-- Connection
    ConnectableNode --o Connection
  }
  
  package composites {
    class Group {
      +nodes: Node[]
    }
    Node <|-- Group
    
    class Module {
      +build(options, self: ModuleInstance)
    }

    class ModuleBuilder {
      -result: ModuleInstance
      -finished: boolean
      +add(node: Node)
      +group(nodes: Node[])
      +connect(source: Node, destination: Node, options)
      +end()
      +getResult(): ModuleInstance
      +register(name: String, node: Node)
      +setSender(node: Node)
      +setReceiver(node: Node)
    }
    ModuleInstance <-- ModuleBuilder : produces 
    ModuleInstance <-- Module : defines
    ModuleBuilder <-- Module : new/uses

    class ModuleInstance {
      +nodes: Node[]
      +connections: Connection[]
    }
    Node <|-- ModuleInstance
    ModuleInstance o-- Node
    ModuleInstance o-- Connection
  }
}

package inputs {
  class Switch {
  
  }
  Sender <|-- Switch
  
  class Slider {
  
  }
  Sender <|-- Slider
  
  class Random {

  }
  Sender <|-- Random
}

package outputs {
  class LED {
    
  }
  Receiver <|-- LED
  
  class Gauge {
    
  }
  Receiver <|-- Gauge

  class Plot {
    
  }
  Receiver <|-- Plot
}

package modules {
  class Image {
    +width: Int
    +height: Int
  }
  ModuleInstance <-- Image
  ModuleInstance <-- IfThenElse
  ModuleInstance <-- While
  ModuleInstance <-- Do
  ModuleInstance <-- Select
}