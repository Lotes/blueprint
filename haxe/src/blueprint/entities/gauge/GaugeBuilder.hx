package blueprint.entities.gauge;

/* THIS FILE WAS GENERATED BY THE 'generate-entity' tool.
 * DO NOT CHANGE ANYTHING HERE! CHANGE THE TEMPLATES INSTEAD!
 */

import blueprint.entities.Builder;
import blueprint.entities.instance.ModuleInstanceBuilder;
import blueprint.entities.TemplateBuilder;
import blueprint.Error;

class GaugeBuilder
	implements GaugeConfigurator<GaugeBuilder>
	implements NameConfigurator<GaugeBuilder>
	implements Builder<Gauge>
	implements TemplateBuilder<GaugeTemplate>
{
	/* VARIABLES */
	private var _moduleInstanceBuilder: ModuleInstanceBuilder;
	private var _finished: Bool = false;
	private var _name: String = null;
	
	private var _threshold: Float;
	
	private var _maximum: Float;
	

	/* CONSTRUCTOR */
	public function new(instanceBuilder: ModuleInstanceBuilder, template: GaugeTemplate)
	{
		this._moduleBuilder = moduleBuilder;
		
		this._threshold = template.getThreshold();
		
		this._maximum = template.getMaximum();
		
	}

	/* INTERFACE Builder<Gauge> */
	public function build(): Gauge
	{
		if (this._finished)
			throw new Error("Gauge was already built!");
		var entity = new Gauge(template());
		_moduleBuilder.add(entity);
		if(this._name != null)
			_moduleBuilder.alias(name, entity);
		this._finished = true;
		return entity;
	}

	/* INTERFACE TemplateBuilder<Gauge> */
	public function template(): GaugeTemplate
	{
		var result = new GaugeTemplate();
		
		result.threshold(this._threshold);
		
		result.maximum(this._maximum);
		
		return result;
	}

	/* INTERFACE GaugeConfigurator<GaugeBuilder> */
	
	public function threshold(value: Float): GaugeBuilder
	{
		this._threshold = value;
		return this;
	}
	
	public function maximum(value: Float): GaugeBuilder
	{
		this._maximum = value;
		return this;
	}
	

	/* INTERFACE NameConfigurator<GaugeBuilder> */
	public function name(name:String): GaugeBuilder
	{
		this._name = name;
		return this;
	}
}
