package {{:package}};

/* THIS FILE WAS GENERATED BY THE 'generate-entity' tool.
 * DO NOT CHANGE ANYTHING HERE! CHANGE THE TEMPLATES INSTEAD! 
 */

import blueprint.entities.Builder;
import blueprint.entities.instance.ModuleInstanceBuilder;
import blueprint.entities.TemplateBuilder;
import blueprint.Error;

class {{:entityName}}Builder
	implements {{:entityName}}Configurator<{{:entityName}}Builder>
	implements NameConfigurator<{{:entityName}}Builder>
	implements Builder<{{:entityName}}>
	implements TemplateBuilder<{{:entityName}}Template>
{
	/* VARIABLES */
	private var _moduleInstanceBuilder: ModuleInstanceBuilder;
	private var _finished: Bool = false;
	private var _name: String = null;
	{{for variables}}{{if configurable}}
	private var _{{:name}}: {{:type}};
	{{/if}}{{/for}}
	
	/* CONSTRUCTOR */
	public function new(instanceBuilder: ModuleInstanceBuilder, template: {{:entityName}}Template) 
	{
		this._moduleInstanceBuilder = instanceBuilder;
		{{for variables}}{{if configurable}}
		this._{{:name}} = template.get{{:name.capitalize()}}();
		{{/if}}{{/for}}
	}
	
	/* INTERFACE Builder<{{:entityName}}> */	
	public function build(): {{:entityName}}
	{
		if (this._finished)
			throw new Error("{{:entityName}} was already built!");
		var entity = new Mutable{{:entityName}}(template());
		_moduleInstanceBuilder.add(entity);
		if(this._name != null)
			_moduleInstanceBuilder.alias(this._name, entity);
		this._finished = true;
		return entity;
	}
	
	/* INTERFACE TemplateBuilder<{{:entityName}}> */	
	public function template(): {{:entityName}}Template
	{
		var result = new {{:entityName}}Template();
		{{for variables}}{{if configurable}}
		result.{{:name}}(this._{{:name}});
		{{/if}}{{/for}}
		return result;
	}
	
	/* INTERFACE {{:entityName}}Configurator<{{:entityName}}Builder> */
	{{for variables}}{{if configurable}}
	public function {{:name}}(value: {{:type}}): {{:~root.entityName}}Builder 
	{
		this._{{:name}} = value;
		return this;
	}
	{{/if}}{{/for}}
	
	/* INTERFACE NameConfigurator<{{:entityName}}Builder> */
	public function name(name:String): {{:entityName}}Builder
	{
		this._name = name;
		return this;
	}
}
