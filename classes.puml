abstract class Object {
  +on(eventName, callback)
  +trigger(eventName, arguments)
}

abstract class Node {
 
}
Object <|-- Node

class Module {
  +build(options, self: ModuleInstance)
}

class ModuleBuilder {
  -result: ModuleInstance
  -finished: boolean
  +add(node: Node)
  +group(nodes: Node[])
  +connect(source: Node, destination: Node, options)
  +end()
  +getResult(): ModuleInstance
  +register(name: String, node: Node)
  +setSender(node: Node)
  +setReceiver(node: Node)
}
ModuleInstance <-- ModuleBuilder : produces 
ModuleInstance <-- Module : defines
ModuleBuilder <-- Module : new/uses

class ModuleInstance {
  +nodes: Node[]
  +connections: Connection[]
}
Node <|-- ModuleInstance
ModuleInstance o-- Node
ModuleInstance o-- Connection

class Group {
  +nodes: Node[]
}
Node <|-- Group

abstract class Sender {
  +outgoingConnections: Connection[]
}
Node <|-- Sender

abstract class Receiver {
  +incomingConnections: Connection[]
}
Node <|-- Receiver

class Neuron {
  +type: NeuronType
  +threshold: float
  +factor: float
  +maximum: float
  +associateConstant: float
  +disassociateConstant: float
  +incomingConnections: Connection[]
  +outgoingConnections: Connection[]
}
Node <|-- Neuron

enum NeuronType {
  ACTIVATE,
  INHIBIT,
  ASSOCIATE,
  DISASSOCIATE
}

enum Events {
  TICK,
  OUTPUT_CHANGE,
  INPUT_CHANGE,
  ACTIVATE,
  WEIGHT_CHANGE
}

class Connection {
  +source: Node
  +destination: Node
  +initialWeight: float
  +decayConstant: float
}
Object <|-- Connection

